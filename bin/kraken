#!/usr/bin/env ruby

require "bundler/setup"
require "soles"
require "thor"

module Soles
  class Commands < Thor
    def self.source_root
      File.expand_path File.join(__dir__, "..", "templates")
    end

    include Thor::Actions

    desc "console ENV", "boot a console with this application environment"
    def console(env = "development")
      require "irb"
      require "irb/completion"
      if self.class.application?(true)
        ENV['SOLES_APP'] = env
        ENV['SOLES_CONTEXT'] = "console"
        require_relative "../config/app.rb"
        ARGV.clear

        banner = <<-EOF

                     .-'   `'.
                    /         \\
                    |         ;
                    |         |           ___.--,
           _.._     |0) ~ (0) |    _.---'`__.-( (_.
    __.--'`_.. '.__.\\    '--. \\_.-' ,.--'`     `""`
   ( ,.--'`   ',__ /./;   ;, '.__.'`    __
   _`) )  .---.__.' / |   |\\   \\__..--""  """--.,_
  `---' .'.''-._.-'`_./  /\\ '.  \\ _.-~~~````~~~-._`-.__.'
------------.' _.-'-|  |-\\  \\  '.-----------------------
            / .'     \\  \\   '. '-._)
           / /        \\  \\    `=.__`~-.
          / /          `) )    / / `"".`\\
    , _.-'.'           / /    ( (     / /
     `--~`          .-'.'      '.'.  | (
                   ( (`          ) )  '-;
                    '-;         (-'

               The Kraken is loose! 

EOF
        shell.say banner, [:red, :yellow, :green, :blue].sample
        IRB.start
      end
    end

    desc "server ENV", "boot the server with a given environment"
    def server(env = "development")
      ENV['SOLES_APP'] = env
      require 'sidekiq/cli'
      root = File.expand_path(File.join(self.class.app_root, "..", ".."))
      cli = Sidekiq::CLI.instance
      cli.parse ["-r", Soles::Commands.app_root, "-c", "32"]
      cli.run
    end

    def self.app_root
      f = File.expand_path(File.join(Dir.pwd, "config", "app.rb"))
      return f if File.exists?(f)

      f = File.expand_path(File.join(__dir__, "..", "config", "app.rb"))
      return f if File.exists?(f)

      return nil
    end

    def self.application?(alert = false)
      return false if %w(server).include? ARGV[0]
      if app_root
        true
      else
        puts "Create a new application with `soles new appname`" if alert
        false
      end
    end

    no_commands do
      def banner(text)
        shell.say "\n#{text}", :yellow
        shell.say "-" * 80, :yellow
      end
    end
  end
end

require Soles::Commands.app_root if Soles::Commands.application?
begin
  Soles::Commands.start
ensure
  Soles.shutdown
end